{"version":3,"sources":["notes/notes.module.css","App.module.css","notes/note.js","notes/notes.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Note","props","useState","className","classes","note","noteDisplay","onChange","e","updateNote","target","value","text","onClick","removeNote","AddNote","state","content","handleChange","setState","handleSubmit","preventDefault","addnote","onSubmit","this","addnote_box","type","placeholder","React","Component","NoteData","notes","notesTable","addNote","data","newNote","index","array","parseInt","splice","userData","JSON","parse","localStorage","getItem","nextProps","nextState","setItem","stringify","noteslist","map","item","i","key","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+EACAA,EAAOC,QAAU,CAAC,YAAc,2BAA2B,UAAY,yBAAyB,KAAO,oBAAoB,YAAc,6B,mBCAzID,EAAOC,QAAU,CAAC,IAAM,mB,8MCGlBC,EAAO,SAACC,GAAW,IAAD,EAEUC,mBAAS,IAFnB,6BAQpB,OACI,yBAAKC,UAAWC,IAAQC,MACpB,2BAAOF,UAAWC,IAAQE,YAAaC,SAN1B,SAACC,GAClBP,EAAMQ,WAAWD,EAAEE,OAAOC,QAKyCA,MAAOV,EAAMW,OAC5E,0BAAMC,QAASZ,EAAMa,YAArB,OAINC,E,2MACFC,MAAQ,CACJC,QAAS,I,EAEbC,aAAe,SAACV,GACZ,EAAKW,SAAS,CACVF,QAAST,EAAEE,OAAOC,S,EAG1BS,aAAe,SAACZ,GACZA,EAAEa,iBACF,EAAKpB,MAAMqB,QAAQ,EAAKN,MAAMC,SAC9B,EAAKE,SAAS,CACVF,QAAS,M,wEAIb,OACI,6BACI,0BAAMM,SAAUC,KAAKJ,aAAcjB,UAAWC,IAAQqB,aAClD,2BAAOC,KAAK,OAAOnB,SAAUiB,KAAKN,aAAcP,MAAOa,KAAKR,MAAMC,QAASU,YAAY,4BACvF,4BAAQD,KAAK,UAAb,sB,GArBEE,IAAMC,WCdtBC,EACF,WAAalB,GAAO,oBAChBY,KAAKZ,KAAOA,GAkELmB,E,2MA7DXf,MAAO,CACHgB,WAAY,CAAC,M,EAGjBC,QAAU,SAACC,GACP,IAAIC,EAAU,IAAIL,EAASI,GAC3B,EAAKf,SAAS,CACVa,WAAW,GAAD,mBAAK,EAAKhB,MAAMgB,YAAhB,CAA4BG,O,EAG9C1B,WAAa,SAAC2B,EAAOF,GACnB,IAAMG,EAAK,YAAO,EAAKrB,MAAMgB,YAC7BK,EAAMC,SAASF,IAAU,IAAIN,EAASI,GACtC,EAAKf,SAAS,CACZa,WAAYK,K,EAGhBvB,WAAa,SAACsB,GACZ,IAAMC,EAAK,YAAO,EAAKrB,MAAMgB,YAC7BK,EAAME,OAAOD,SAASF,GAAQ,GAC9B,EAAKjB,SAAS,CACZa,WAAYK,K,mFAKZb,KAAKgB,SAAWC,KAAKC,MAAMC,aAAaC,QAAQ,SAE5CD,aAAaC,QAAQ,QACrBpB,KAAKL,SAAS,CACVa,WAAaR,KAAKgB,SAASR,aAG/BR,KAAKL,SAAS,CACVa,WAAY,CAAC,S,0CAILa,EAAWC,GAC3BH,aAAaI,QAAQ,OAAQN,KAAKO,UAAUF,M,+BAGtC,IAAD,OACL,OACA,6BACE,kBAAC,EAAD,CAASxB,QAASE,KAAKS,UACvB,yBAAK9B,UAAWC,IAAQ6C,WAElBzB,KAAKR,MAAMgB,WAAWkB,KAAI,SAACC,EAAMC,GAAP,OAC1B,kBAAC,EAAD,CAAM3C,WAAY,SAACyB,GAAD,OAAU,EAAKzB,WAAW2C,EAAGlB,IACzCpB,WAAY,kBAAM,EAAKA,WAAWsC,IAClCxC,KAAMuC,EAAKvC,KACXyC,IAAKD,a,GArDPvB,a,iBCGLyB,MARf,WACE,OACE,yBAAKnD,UAAWC,IAAQkD,KACpB,kBAAC,EAAD,QCGYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.958ef0e5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"addnote_box\":\"notes_addnote_box__T0uuU\",\"noteslist\":\"notes_noteslist__1nMxl\",\"note\":\"notes_note__1DGTV\",\"noteDisplay\":\"notes_noteDisplay__PClWk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__16ZpL\"};","import React, {useState} from 'react';\n\nimport classes from './notes.module.css';\n\nconst Note = (props) => {\n\n    const [content, setContent] = useState('');\n\n    const handleChange = (e) => {\n        props.updateNote(e.target.value);\n    }\n\n    return (\n        <div className={classes.note}>\n            <input className={classes.noteDisplay} onChange={handleChange} value={props.text}></input>\n            <span onClick={props.removeNote}>-</span>\n        </div>\n    );\n}\nclass AddNote extends React.Component {\n    state = {\n        content: ''\n    }\n    handleChange = (e) => {\n        this.setState({\n            content: e.target.value\n        })\n    }\n    handleSubmit = (e) => {\n        e.preventDefault();\n        this.props.addnote(this.state.content);\n        this.setState({\n            content: ''\n        })\n    }\n    render(){\n        return(\n            <div>\n                <form onSubmit={this.handleSubmit} className={classes.addnote_box}>\n                    <input type=\"text\" onChange={this.handleChange} value={this.state.content} placeholder=\"Create a simple note...\"/>\n                    <button type=\"submit\">Add new note</button>\n                </form>\n            </div>\n        )\n    }\n}\nexport {Note, AddNote};\n","import React, {Component} from 'react';\nimport {Note, AddNote} from './note';\n\nimport classes from './notes.module.css';\n\nclass NoteData {\n    constructor (text) {\n        this.text = text;\n    }\n}\n\nclass notes extends Component {\n    state ={\n        notesTable: [\" \"]\n    };\n\n    addNote = (data) => {\n        let newNote = new NoteData(data);\n        this.setState({\n            notesTable:[...this.state.notesTable, newNote]\n        });\n    }\n    updateNote = (index, data) => {\n      const array = [...this.state.notesTable];\n      array[parseInt(index)] = new NoteData(data);\n      this.setState({\n        notesTable: array\n      })\n    }\n    removeNote = (index) => {\n      const array = [...this.state.notesTable];\n      array.splice(parseInt(index), 1);\n      this.setState({\n        notesTable: array\n      });\n    }\n\n    componentDidMount() {\n        this.userData = JSON.parse(localStorage.getItem('user'));\n\n        if (localStorage.getItem('user')) {\n            this.setState({\n                notesTable : this.userData.notesTable\n            })\n        } else {\n            this.setState({\n                notesTable: [\" \"]\n            })\n        }\n    }\n    componentWillUpdate(nextProps, nextState) {\n        localStorage.setItem('user', JSON.stringify(nextState));\n    }\n\n    render() {\n        return (\n        <div>\n          <AddNote addnote={this.addNote}/>\n          <div className={classes.noteslist}>\n              {\n                this.state.notesTable.map((item, i) =>\n                <Note updateNote={(data) => this.updateNote(i, data)}\n                      removeNote={() => this.removeNote(i)}\n                      text={item.text}\n                      key={i}\n                />\n              )}\n          </div>\n        </div>\n        );\n    }\n}\n\nexport default notes;\n","import React from 'react';\nimport Notes from './notes/notes';\n\n\nimport classes from './App.module.css';\n\nfunction App() {\n  return (\n    <div className={classes.App}>\n        <Notes/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}